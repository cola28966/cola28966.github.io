{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"多线程","link":"/tags/index.html"}],"posts":[{"title":"Java多线程(二)","text":"一 Java多线程的规则第一条规则：调用run方法，来启动run方法，将会是串行运行 代码： 123456789101112131415161718192021class ThreadDemo3{ public static void main(String[] args) throws Exception{ new TestThread0().run(); while (true){ System.out.println(\"main thread is running\"); Thread.sleep(10); } }}class TestThread0{ public void run(){ while (true){ System.out.println(\" TestThread1 is running\"); try{ Thread.sleep(1000); }catch (InterruptedException e){ e.printStackTrace(); } } }} 运行结果 12345TestThread1 is runningTestThread1 is runningTestThread1 is runningTestThread1 is runningTestThread1 is running 调用start方法，来启动run方法，将会是并行运行 代码： 123456789101112131415161718192021class ThreadDemo3{ public static void main(String[] args) throws Exception{ new TestThread0().start(); while (true){ System.out.println(\"main thread is running\"); Thread.sleep(1000); } }}class TestThread0 extends Thread{ public void run(){ while (true){ System.out.println(\" TestThread1 is running\"); try{ Thread.sleep(1000); }catch (InterruptedException e){ e.printStackTrace(); } } }} 运行结果 123456789main thread is running TestThread1 is runningmain thread is running TestThread1 is running TestThread1 is runningmain thread is runningmain thread is running TestThread1 is running TestThread1 is running 第二条规则：main线程可能早于子线程结束 代码： 12345678910111213141516171819class ThreadDemo3{ public static void main(String[] args) throws Exception{ new TestThread0().start(); System.out.println(\"main thread is end\"); }}class TestThread0 extends Thread{ public void run(){ while (true){ System.out.println(\" TestThread1 is running\"); try{ Thread.sleep(1000); }catch (InterruptedException e){ e.printStackTrace(); } } }} 运行结果 12345678main thread is end TestThread1 is running TestThread1 is running TestThread1 is running TestThread1 is running TestThread1 is running TestThread1 is running TestThread1 is running 第三条规则： 实现Runnable的对象必须包装在Thread类里面 不能直接对Runnable的对象进行start方法 第四条规则： 实现一个线程对象不能多次start，多次start将报异常 多个线程对象都start后，哪一个先执行，完全由JVM/操作系统来主导，程序员无法指定 代码 12345678910111213141516171819class ThreadDemo3{ public static void main(String[] args) throws Exception{ new TestThread0().start(); new TestThread0().start(); new TestThread0().start(); }}class TestThread0 extends Thread{ public void run(){ while (true){ System.out.println(String.format(\"%s is running\",Thread.currentThread().getName())); try{ Thread.sleep(1000); }catch (InterruptedException e){ e.printStackTrace(); } } }} 运行结果 1234567Thread-2 is runningThread-0 is runningThread-1 is runningThread-0 is runningThread-1 is runningThread-2 is runningThread-2 is running Java多线程实现对比 Thread vs Runnable Thread占据了父类名额 Thread类实现Runnable Runnable启动时需要Thread类的支持 Runnable更容易实现多线程中资源共享(Thread里面必须使用static变量，才能实现变量共享)","link":"/2020/02/01/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BA%8C-1/"},{"title":"Java多线程(一)","text":"一 进程和线程的定义和区别进程： 每个独立执行的任务就是一个进程线程：一个程序可以包括多个子任务，可窜/并行，每个子任务可以称为一个线程，线程是进程的一部分。 多线程vs多进程 线程数据共享 线程通讯更高效 线程更清量级，更容易切换 多个线程更容易管理 二 多线程的创建Java 的四个主要接口： Cloneable， 用于对象克隆 Comparable，用于对象比较 Serializeble，用于对象序列化 Runnable，用于对象线程化 创建方式 java.lang.Thread 线程继承Thread类，实现run方法 代码： 123456public class ThreadDemo1 extends Thread { @Override public void run() { System.out.println(\"hello\"); }} java.lang.Runnable接口 线程实现Runnable接口，实现run方法 代码: 123456public class ThreadDemo2 implements Runnable{ @Override public void run() { System.out.println(\"hello\"); }} Thread方式 可以通过继承Thread类来创建线程 通过start方法来启动线程的run方法 代码： 12345678910public class ThreadDemo1 extends Thread { @Override public void run() { System.out.println(\"hello\"); } public static void main(String[] args) { new ThreadDemo1().start(); }} Runable方式： 可以通过实现Runnable接口来创建线程 实现Runnable的对象必须包装在Thread类里面，才可以启动 通过start方法来启动线程的run方法 代码: 12345678910public class ThreadDemo2 implements Runnable{ @Override public void run() { System.out.println(\"hello\"); } public static void main(String[] args) { new Thread(new ThreadDemo2()).start(); }}","link":"/2020/02/01/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B(1)/"}],"tags":[{"name":"多线程","slug":"多线程","link":"/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"categories":[]}